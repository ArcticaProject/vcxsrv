.\" $Xorg: XtGrabKey.man,v 1.3 2000/08/17 19:42:01 cpqbld Exp $
.\"
.\" Copyright (c) 1993, 1994  X Consortium
.\" 
.\" Permission is hereby granted, free of charge, to any person obtaining a
.\" copy of this software and associated documentation files (the "Software"), 
.\" to deal in the Software without restriction, including without limitation 
.\" the rights to use, copy, modify, merge, publish, distribute, sublicense, 
.\" and/or sell copies of the Software, and to permit persons to whom the 
.\" Software furnished to do so, subject to the following conditions:
.\" 
.\" The above copyright notice and this permission notice shall be included in
.\" all copies or substantial portions of the Software.
.\" 
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
.\" IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
.\" FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL 
.\" THE X CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
.\" WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF 
.\" OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE 
.\" SOFTWARE.
.\" 
.\" Except as contained in this notice, the name of the X Consortium shall not 
.\" be used in advertising or otherwise to promote the sale, use or other 
.\" dealing in this Software without prior written authorization from the 
.\" X Consortium.
.\"
.\" $XFree86: xc/doc/man/Xt/XtGrabKey.man,v 1.3 2001/02/09 03:47:51 tsi Exp $
.\"
.ds tk X Toolkit
.ds xT X Toolkit Intrinsics \- C Language Interface
.ds xI Intrinsics
.ds xW X Toolkit Athena Widgets \- C Language Interface
.ds xL Xlib \- C Language X Interface
.ds xC Inter-Client Communication Conventions Manual
.ds Rn 3
.ds Vn 2.2
.hw XtGrab-Key XtUngrab-Key XtGrab-Keyboard XtUngrab-Keyboard XtGrab-Button XtUngrab-Button XtGrab-Pointer XtUngrab-Pointer wid-get
.na
.de Ds
.nf
.\\$1D \\$2 \\$1
.ft 1
.ps \\n(PS
.\".if \\n(VS>=40 .vs \\n(VSu
.\".if \\n(VS<=39 .vs \\n(VSp
..
.de De
.ce 0
.if \\n(BD .DF
.nr BD 0
.in \\n(OIu
.if \\n(TM .ls 2
.sp \\n(DDu
.fi
..
.de FD
.LP
.KS
.TA .5i 3i
.ta .5i 3i
.nf
..
.de FN
.fi
.KE
.LP
..
.de IN		\" send an index entry to the stderr
..
.de C{
.KS
.nf
.D
.\"
.\"	choose appropriate monospace font
.\"	the imagen conditional, 480,
.\"	may be changed to L if LB is too
.\"	heavy for your eyes...
.\"
.ie "\\*(.T"480" .ft L
.el .ie "\\*(.T"300" .ft L
.el .ie "\\*(.T"202" .ft PO
.el .ie "\\*(.T"aps" .ft CW
.el .ft R
.ps \\n(PS
.ie \\n(VS>40 .vs \\n(VSu
.el .vs \\n(VSp
..
.de C}
.DE
.R
..
.de Pn
.ie t \\$1\fB\^\\$2\^\fR\\$3
.el \\$1\fI\^\\$2\^\fP\\$3
..
.de ZN
.ie t \fB\^\\$1\^\fR\\$2
.el \fI\^\\$1\^\fP\\$2
..
.de NT
.ne 7
.ds NO Note
.if \\n(.$>$1 .if !'\\$2'C' .ds NO \\$2
.if \\n(.$ .if !'\\$1'C' .ds NO \\$1
.ie n .sp
.el .sp 10p
.TB
.ce
\\*(NO
.ie n .sp
.el .sp 5p
.if '\\$1'C' .ce 99
.if '\\$2'C' .ce 99
.in +5n
.ll -5n
.R
..
.		\" Note End -- doug kraft 3/85
.de NE
.ce 0
.in -5n
.ll +5n
.ie n .sp
.el .sp 10p
..
.ny0
.TH XtGrabKey __libmansuffix__ __xorgversion__ "XT FUNCTIONS"
.SH NAME
XtGrabKey, XtUngrabKey, XtGrabKeyboard, XtUngrabKeyboard, XtGrabButton, XtUngrabButton, XtGrabPointer, XtUngrabPointer \- manage grabs
.SH SYNTAX
.HP
void XtGrabKey(Widget \fIwidget\fP, KeyCode \fIkeycode\fP, Modifiers
\fImodifiers\fP, Boolean \fIowner_events\fP, int \fIpointer_mode\fP, int
\fIkeyboard_mode\fP); 
.HP
void XtUngrabKey(Widget \fIwidget\fP, KeyCode \fIkeycode\fP, Modifiers
\fImodifiers\fP); 
.HP
int XtGrabKeyboard(Widget \fIwidget\fP, Boolean \fIowner_events\fP, int
\fIpointer_mode\fP, int \fIkeyboard_mode\fP, Time \fItime\fP); 
.HP
void XtUngrabKeyboard(Widget \fIwidget\fP, Time \fItime\fP); 
.HP
void XtGrabButton(Widget \fIwidget\fP, int \fIbutton\fP, Modifiers
\fImodifiers\fP, Boolean \fIowner_events\fP, unsigned int \fIevent_mask\fP,
int \fIpointer_mode\fP, int \fIkeyboard_mode\fP, Window \fIconfine_to\fP,
Cursor \fIcursor\fP); 
.HP
void XtUngrabButton(Widget \fIwidget\fP, KeyCode \fIbutton\fP, Modifiers
\fImodifiers\fP); 
.HP
int XtGrabPointer(Widget \fIwidget\fP, Boolean \fIowner_events\fP, unsigned
int \fIevent_mask\fP, int \fIpointer_mode\fP, int \fIkeyboard_mode\fP, Window
\fIconfine_to\fP, Cursor \fIcursor\fP, Time \fItime\fP); 
.HP
void XtUngrabPointer(Widget \fIwidget\fP, Time \fItime\fP); 
.SH ARGUMENTS
.IP \fIwidget\fP 1i
Specifies the widget in whose window the grab will occur. Must be of
class Core or a subclass thereof.
.sp 6p
.IP \fIkeycode\fP
.br
.ns
.IP \fImodifiers\fP
.br
.ns
.IP \fIowner_events\fP
.br
.ns
.IP \fIpointer_mode\fP
.br
.ns
.IP \fIkeyboard_mode\fP
.br
.ns
.IP \fItime\fP
.br
.ns
.IP \fIbutton\fP
.br
.ns
.IP \fIconfine_to\fP
.br
.ns
.IP \fIcursor\fP 1i
Specifies arguments to the associated Xlib function call.
.SH DESCRIPTION
.ZN XtGrabKey
calls
.ZN XGrabKey
specifying the widget's window as the grab window if the widget is
realized. The remaining arguments are exactly as for
.ZN XGrabKey .
If the widget is not realized, or is later unrealized, the call to
.ZN XGrabKey 
will be performed (again) when the widget is realized and its window
becomes mapped. In the future, if
.ZN XtDispatchEvent
is called with a
.ZN KeyPress
event matching the specified keycode and modifiers (which may be
.ZN AnyKey
or
.ZN AnyModifier ,
respectively) for the widget's window, the Intrinsics will call
.ZN XtUngrabKeyboard
with the timestamp from the
.ZN KeyPress
event if either of the following conditions is true:
.IP \(bu 3
There is a modal cascade and the widget is not in the active subset
of the cascade and the keyboard was not previously grabbed, or
.IP \(bu 3
.ZN XFilterEvent
returns
.ZN True .
.LP
.ZN XtUngrabKey
calls
.ZN XUngrabKey
specifying the widget's window as the ungrab window if the widget is
realized. The remaining arguments are exactly as for
.ZN XUngrabKey .
If the widget is not realized,
.ZN XtUngrabKey
removes a deferred
.ZN XtGrabKey
request, if any, for the specified widget, keycode, and modifiers.
.LP
If the specified widget is realized
.ZN XtGrabKeyboard
calls
.ZN XGrabKeyboard
specifying the widget's window as the grab window. The remaining
arguments and return value are exactly as for
.ZN XGrabKeyboard .
If the widget is not realized,
.ZN XtGrabKeyboard
immediately returns
.ZN GrabNotViewable .
No future ungrab is implied by
.ZN XtGrabKeyboard .
.LP
.ZN XtUngrabKeyboard
calls
.ZN XUngrabKeyboard
with the specified time.
.LP
.ZN XtGrabButton
calls
.ZN XGrabButton
specifying the widget's window as the grab window if the widget is
realized. The remaining arguments are exactly as for
.ZN XGrabButton .
If the widget is not realized, or is later unrealized, the call to
.ZN XGrabButton 
will be performed (again) when the widget is realized and its window
becomes mapped. In the future, if
.ZN XtDispatchEvent
is called with a
.ZN ButtonPress
event matching the specified button and modifiers (which may be
.ZN AnyButton
or
.ZN AnyModifier ,
respectively) for the widget's window, the Intrinsics will call
.ZN XtUngrabPointer
with the timestamp from the
.ZN ButtonPress
event if either of the following conditions is true:
.IP \(bu 3
There is a modal cascade and the widget is not in the active subset
of the cascade and the pointer was not previously grabbed, or
.IP \(bu 3
.ZN XFilterEvent
returns
.ZN True .
.LP
.ZN XtUngrabButton
calls
.ZN XUngrabButton
specifying the widget's window as the ungrab window if the widget is
realized. The remaining arguments are exactly as for
.ZN XUngrabButton .
If the widget is not realized,
.ZN XtUngrabButton
removes a deferred
.ZN XtGrabButton
request, if any, for the specified widget, button, and modifiers.
.LP
.ZN XtGrabPointer
calls
.ZN XGrabPointer
specifying the widget's window as the grab window. The remaining
arguments and return value are exactly as for
.ZN XGrabPointer .
If the widget is not realized,
.ZN XtGrabPointer
immediately returns
.ZN GrabNotViewable .
No future ungrab is implied by
.ZN XtGrabPointer .
.LP
.ZN XtUngrabPointer
calls
.ZN XUngrabPointer
with the specified time.
.SH "SEE ALSO"
.br
\fI\*(xT\fP
.br
\fI\*(xL\fP
