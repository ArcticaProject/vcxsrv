#######################################################################
# SConscript for Mesa


Import('*')
import filecmp
import os
import subprocess
from sys import executable as python_cmd

env = env.Clone()

env.Append(CPPPATH = [
    '#/src',
    '#/src/mapi',
    '#/src/glsl',
    '#/src/mesa',
    Dir('../mapi'), # src/mapi build path
    Dir('.'), # src/mesa build path
])

if env['platform'] == 'windows':
    env.Append(CPPDEFINES = [
        '_GDI32_', # prevent gl* being declared __declspec(dllimport) in MS headers
        'BUILD_GL32', # declare gl* as __declspec(dllexport) in Mesa headers
    ])
    if not env['gles']:
        # prevent _glapi_* from being declared __declspec(dllimport)
        env.Append(CPPDEFINES = ['_GLAPI_NO_EXPORTS'])
else:
    env.Append(CPPDEFINES = [
        ('HAVE_DLOPEN', '1'),
    ])

# parse Makefile.sources
source_lists = env.ParseSourceList('Makefile.sources')

env.Append(YACCFLAGS = '-d -p "_mesa_program_"')
program_lex = env.CFile('program/lex.yy.c', 'program/program_lexer.l')
program_parse = env.CFile('program/program_parse.tab.c',
                          'program/program_parse.y')
program_sources = source_lists['PROGRAM_FILES'] + [
    program_lex,
    program_parse[0],
]

mesa_sources = (
    source_lists['MESA_FILES'] +
    program_sources +
    source_lists['STATETRACKER_FILES']
)

GLAPI = '#src/mapi/glapi/'

get_hash_header = env.CodeGenerate(
      target = 'main/get_hash.h',
      script = 'main/get_hash_generator.py',
      source = GLAPI + 'gen/gl_and_es_API.xml',
      command = python_cmd + ' $SCRIPT ' + ' -f $SOURCE > $TARGET'
)

format_info = env.CodeGenerate(
      target = 'main/format_info.c',
      script = 'main/format_info.py',
      source = 'main/formats.csv',
      command = python_cmd + ' $SCRIPT ' + ' $SOURCE > $TARGET'
)

#
# Assembly sources
#
if (env['gcc'] or env['clang']) and \
   env['platform'] not in ('cygwin', 'darwin', 'windows', 'haiku'):
    if env['machine'] == 'x86':
        env.Append(CPPDEFINES = [
            'USE_X86_ASM',
            'USE_MMX_ASM',
            'USE_3DNOW_ASM',
            'USE_SSE_ASM',
        ])
        mesa_sources += source_lists['X86_FILES']
    elif env['machine'] == 'x86_64':
        env.Append(CPPDEFINES = [
            'USE_X86_64_ASM',
        ])
        mesa_sources += source_lists['X86_64_FILES']
    elif env['machine'] == 'sparc':
        mesa_sources += source_lists['SPARC_FILES']
    else:
        pass

    # Generate matypes.h
    if env['machine'] in ('x86', 'x86_64'):
        # See http://www.scons.org/wiki/UsingCodeGenerators
        gen_matypes = env.Program(
            target = 'gen_matypes',
            source = 'x86/gen_matypes.c',
        )
        matypes = env.Command(
            'matypes.h',
            gen_matypes,
            gen_matypes[0].abspath + ' > $TARGET',
        )
        # Add the dir containing the generated header (somewhere inside  the
        # build dir) to the include path
        env.Append(CPPPATH = [matypes[0].dir])


def write_git_sha1_h_file(filename):
    """Mesa looks for a git_sha1.h file at compile time in order to display
    the current git hash id in the GL_VERSION string.  This function tries
    to retrieve the git hashid and write the header file.  An empty file
    will be created if anything goes wrong."""

    args = [ 'git', 'log', '-n', '1', '--oneline' ]
    try:
        (commit, foo) = subprocess.Popen(args, stdout=subprocess.PIPE).communicate()
    except:
        # git log command didn't work
        if not os.path.exists(filename):
            # create an empty file if none already exists
            f = open(filename, "w")
            f.close()
        return

    commit = '#define MESA_GIT_SHA1 "git-%s"\n' % commit[0:7]
    tempfile = "git_sha1.h.tmp"
    f = open(tempfile, "w")
    f.write(commit)
    f.close()
    if not os.path.exists(filename) or not filecmp.cmp(tempfile, filename):
        # The filename does not exist or it's different from the new file,
        # so replace old file with new.
        if os.path.exists(filename):
            os.remove(filename)
        os.rename(tempfile, filename)
    return


# Create the git_sha1.h header file
write_git_sha1_h_file("main/git_sha1.h")
# and update CPPPATH so the git_sha1.h header can be found
env.Append(CPPPATH = ["#" + env['build_dir'] + "/mesa/main"])


#
# Libraries
#

mesa = env.ConvenienceLibrary(
    target = 'mesa',
    source = mesa_sources,
)

env.Alias('mesa', mesa)

Export('mesa')

SConscript('drivers/SConscript')
