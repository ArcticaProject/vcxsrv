#line 2 "glsl_lexer.cpp"

#line 4 "glsl_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE _mesa_glsl_restart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via _mesa_glsl_restart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void _mesa_glsl_restart (FILE *input_file ,yyscan_t yyscanner );
void _mesa_glsl__switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE _mesa_glsl__create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void _mesa_glsl__delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void _mesa_glsl__flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void _mesa_glsl_push_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void _mesa_glsl_pop_buffer_state (yyscan_t yyscanner );

static void _mesa_glsl_ensure_buffer_stack (yyscan_t yyscanner );
static void _mesa_glsl__load_buffer_state (yyscan_t yyscanner );
static void _mesa_glsl__init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER _mesa_glsl__flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE _mesa_glsl__scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE _mesa_glsl__scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE _mesa_glsl__scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *_mesa_glsl_alloc (yy_size_t ,yyscan_t yyscanner );
void *_mesa_glsl_realloc (void *,yy_size_t ,yyscan_t yyscanner );
void _mesa_glsl_free (void * ,yyscan_t yyscanner );

#define yy_new_buffer _mesa_glsl__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        _mesa_glsl_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            _mesa_glsl__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        _mesa_glsl_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            _mesa_glsl__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define _mesa_glsl_wrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 183
#define YY_END_OF_BUFFER 184
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[708] =
    {   0,
        0,    0,   15,   15,    0,    0,  184,  182,    1,   20,
      182,  182,  182,  182,  182,  182,  182,  182,   96,   94,
      182,  182,  182,  181,  182,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  182,    1,  182,   91,  183,
       15,   19,  183,   18,   16,   17,   13,   12,    1,   80,
       87,   81,   90,   84,   75,   86,   76,   93,   98,   85,
       99,   96,    0,    0,  101,    0,   94,    0,   77,   79,
       78,    0,  181,   83,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,   28,  181,  181,  181,

      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
       32,  181,  181,   56,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,   92,   82,    1,    0,    0,
        2,    0,    0,    0,    0,   15,   14,   18,   17,    0,
       98,   97,    0,   99,    0,  100,   95,   88,   89,  181,
      104,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,   31,  181,  181,  181,  181,  181,  181,  181,

      181,  181,  181,   25,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,   57,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,    0,    0,    0,    0,   14,    0,   98,    0,
       97,    0,   99,  100,  181,  181,   23,  181,  181,  144,
      181,  181,  181,  181,  181,  181,  181,  181,  181,   30,
      107,  181,  181,  181,  181,   63,  181,  181,  112,  126,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  123,  147,   44,   45,   46,  181,  181,  181,  181,

      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  110,  102,  181,  181,
      181,  181,  181,  181,  181,   41,   42,   43,   73,  181,
      181,    0,    0,    0,    0,    0,   97,  181,  181,   26,
       35,   36,   37,  181,  105,  181,   22,  181,  181,  181,
      181,  134,  135,  136,  181,  103,  181,  127,   24,  137,
      138,  139,  149,  131,  132,  133,  181,  181,  181,   58,
      129,  181,  181,   38,   39,   40,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  124,  181,  181,  181,  181,  181,  181,  181,

      181,  181,  181,  106,  181,  146,  181,  181,   29,    0,
        0,    0,    0,  153,  181,  181,  151,  181,  181,  181,
      125,  120,  156,  181,  181,  181,  181,  181,  181,  115,
      181,  181,   74,   47,   48,   49,   50,   51,   52,   53,
       54,   55,  181,  181,  181,  181,  130,  111,  181,  181,
      118,   34,  181,  181,  143,   64,  119,   72,  154,  113,
      181,  181,  181,  181,  181,  181,  181,    0,    0,    0,
        0,  181,  181,  181,  114,   33,  181,  181,  181,  181,
      181,  181,  157,  158,  159,  181,  181,  181,  181,  148,
      181,  181,  181,  181,  181,  181,  181,  181,  108,  181,

      181,  181,  181,  181,   59,  181,   60,  181,    0,    0,
        0,    0,    0,  181,   61,   27,  121,  161,  162,  163,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  116,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  109,  165,  166,  167,  181,  181,  128,  117,    0,
        0,    6,    0,    0,    0,   11,    3,   21,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  160,  122,   62,
      145,  181,  152,  150,  180,   66,   67,   68,  181,  181,
      181,  181,  181,  181,    0,    0,    0,    0,    0,    0,
      181,  181,  181,  164,  181,  181,  181,  181,  181,  181,

      181,  181,  181,  181,  181,  181,  181,  181,  181,  168,
        4,    0,    5,    0,    0,    0,    0,    0,  181,  181,
      181,  181,  181,  181,  181,  177,  181,  181,  181,  181,
      181,  181,   69,  181,  181,  181,    0,    0,    0,  181,
      181,  178,  169,  181,  170,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  179,    0,    0,  171,  172,  175,
      176,   65,  181,  140,  181,  141,  155,  173,  174,    0,
        0,  181,  181,  181,    0,    0,    0,   70,  181,   71,
        0,    0,    0,  181,    0,    0,    0,  181,    0,    0,
        7,    0,    0,  181,    0,    8,    0,    0,  142,    0,

        0,    0,    0,    9,    0,   10,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    1,    6,    1,    7,    8,    1,    9,
       10,   11,   12,    1,   13,   14,   15,   16,   17,   18,
       19,   20,   21,   21,   21,   22,   22,   23,    1,   24,
       25,   26,    1,    1,   27,   28,   29,   30,   31,   32,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   34,   35,   33,   33,   33,   33,   36,   33,   33,
        1,    1,    1,   37,   38,    1,   39,   40,   41,   42,

       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       53,   54,   33,   55,   56,   57,   58,   59,   60,   61,
       62,   63,    1,   64,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[65] =
    {   0,
        1,    2,    3,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    4,    4,    4,    4,    4,
        4,    5,    1,    1,    1,    1,    6,    6,    6,    6,
        5,    5,    7,    7,    7,    8,    1,    7,    6,    6,
        6,    6,    5,    5,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        8,    7,    7,    1
    } ;

static yyconst flex_int16_t yy_base[719] =
    {   0,
        0,   63,   88,    0, 1076, 1075, 1077, 1080,   64, 1080,
     1051, 1050,   59, 1049,   58,   60,   58, 1048,  139,  187,
       47, 1047,   56,    0, 1034,  121,  110,  137,  138,  134,
      163, 1017,  173,  177,  115,  149,  140, 1011,  159,  121,
      187,  194,  194,  172, 1022,  171,  249,  240, 1042, 1080,
      250, 1080, 1051,  241, 1080,    0, 1080, 1080,  262, 1080,
     1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080,  236, 1080,
      238,  187,  286,  303, 1080,    0,    0, 1040, 1080, 1080,
     1080, 1039,    0, 1080, 1006, 1011, 1004, 1007, 1016, 1015,
     1001, 1004, 1016,   35, 1010,  997,  994, 1008,  994,  991,

      991,  997,  215,  232,  991, 1002,  987,  993,  997,  998,
        0,  989, 1000,  234,  995,  975,  226,  979,  993,  983,
      119,  976,  234,  989,  991,  973,  969,  977,  974,  963,
      972,  256,  970,  976,  971,  974,  962,  965,  967,  245,
      970,  961,  974,  227,  967, 1080, 1080,  308,  294,  324,
     1080,  952,  965,  956,  967,  329,    0,  338,    0,  368,
     1080,  303,  379, 1080,  386,  393,    0, 1080, 1080,  962,
        0,  953,  957,  967,  964,  947,  946,  946,  950,  216,
      961,  958,  958,  956,  953,  944,  951,  937,  935,  948,
      933,  950,    0,  947,  934,  942,  939,  943,  944,  937,

      934,  922,  921,  935,  938,  935,  922,  929,  919,  320,
      925,  928,  918,  926,  914,  918,  909,  924,  914,  905,
      924,  907,  905,  916,  905,  900,  898,  912,  897,  899,
      896,  908,  907,  910,  288,  901,  895,  884,  331,  903,
      905,  893,  885,  889,  901,  884,    0,  400,  410,  427,
     1080,  439,  446, 1080,  879,  890,    0,  887,  343,    0,
      880,  878,  880,  875,  884,  872,  890,  878,  346,    0,
        0,  872,  883,  882,  882,    0,  866,  350,    0,    0,
      868,  353,  876,  877,  867,  861,  860,  861,  860,  357,
      856,    0,    0,  852,  851,  850,  852,  853,  858,  852,

      848,  862,  857,  856,  855,  846,  849,  849,  841,  844,
      839,  848,  853,  838,  851,  841,    0,    0,  848,  844,
      835,  835,  841,  840,  837,    0,    0,    0,    0,  826,
      839,  838,  837,  834,  822,  453,  463,  834,  836,    0,
        0,    0,    0,  822,    0,  822,    0,  821,  822,  816,
      827,    0,    0,    0,  817,    0,  813,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  824,  469,  823,    0,
        0,  821,  817,    0,    0,    0,  806,  415,  432,  473,
      811,  807,  813,  803,  801,  815,  799,  799,  813,  801,
      813,  808,    0,  806,  803,  807,  790,  792,  799,  805,

      800,  799,  786,    0,  788,    0,  787,  791,    0,  785,
      834,  784,  787,    0,  775,  785,    0,  773,  773,  787,
        0,  789,    0,  482,  797,  796,  795,  766,  765,    0,
      783,  782,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  766,  780,  766,  763,    0,    0,  769,  768,
        0,    0,  766,  758,    0,    0,    0,    0,    0,    0,
      755,  767,  485,  759,  766,  763,  757,  750,  503,  766,
      751,  746,  760,  758,    0,    0,  750,  769,  768,  767,
      738,  737,  301,  481,    0,  750,  753,  751,  739,    0,
      749,  746,  745,  734,  733,  732,  509,  741,    0,  753,

      752,  751,  722,  721,    0,  736,    0,  734,  729,  515,
      527,  773,  722,  730,    0,    0,    0,  745,  744,    0,
      726,  729,  713,  721,  711,  719,  720,  720,  719,  704,
      717,    0,  718,  706,  705,  701,  725,  724,  723,  694,
      693,    0,  723,  722,    0,  704,  707,    0,    0,  693,
      537, 1080,  561,    0,  567,  340, 1080,    0,  690,  689,
      699,  699,  686,  701,  684,  699,  694,    0,    0,    0,
        0,  679,    0,    0,    0,  700,  389,  700,  689,  692,
      676,  675,  685,  685,  675,  529,  589,  474,  683,  671,
      669,  668,  679,    0,  682,  678,  680,  676,  662,  669,

      669,  671,  667,  669,  667,  667,  654,  653,  664,    0,
     1080,  531, 1080,  596,    0,  616,  666,  648,  665,  664,
      647,  635,  643,  633,  634,    0,  627,  646,  635,  607,
      604,  601,    0,  604,  603,  586,  533,  572,  580,  564,
      563,    0,    0,  564,    0,  540,  554,  552,  516,  530,
      505,  486,  453,  450,    0,  461,  443,    0,    0,    0,
        0,    0,  400,  406,  385,    0,    0,    0,    0,  343,
      389,  319,  267,  249,  487,  341,  235,    0,  200,    0,
      507,  498,  184,  157,  150,  564,  559,  136,  565,  591,
     1080,  593,  550,  112,  594, 1080,  569,  576,    0,  123,

      619,  621,  637, 1080,  638, 1080, 1080,  648,  653,  658,
      663,  665,  667,  673,  680,  685,  690,  695
    } ;

static yyconst flex_int16_t yy_def[719] =
    {   0,
      707,    1,  707,    3,  708,  708,  707,  707,  707,  707,
      707,  707,  707,  707,  707,  707,  707,  707,  707,  707,
      707,  707,  707,  709,  707,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  707,  707,  707,  707,  707,
      707,  707,  707,  707,  707,  710,  707,  707,  707,  707,
      707,  707,  707,  707,  707,  707,  707,  707,  711,  707,
      712,   19,  707,  707,  707,  713,   20,  707,  707,  707,
      707,  707,  709,  707,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,

      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  707,  707,  707,  707,  707,
      707,  707,  707,  707,  707,  707,  714,  707,  710,  707,
      707,  712,  707,  707,  707,  707,  713,  707,  707,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,

      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  707,  707,  707,  707,  714,  707,  707,  707,
      707,  707,  707,  707,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,

      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  707,  707,  707,  707,  707,  707,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,

      709,  709,  709,  709,  709,  709,  709,  709,  709,  707,
      707,  707,  707,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  707,  707,  707,
      707,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,

      709,  709,  709,  709,  709,  709,  709,  709,  707,  715,
      707,  707,  707,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  707,
      707,  707,  707,  716,  707,  707,  707,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  707,  717,  707,  716,  707,  707,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,

      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      707,  707,  707,  707,  718,  707,  707,  707,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  718,  707,  707,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  707,  707,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  707,
      707,  709,  709,  709,  707,  707,  707,  709,  709,  709,
      707,  707,  707,  709,  707,  707,  707,  709,  707,  707,
      707,  707,  707,  709,  707,  707,  707,  707,  709,  707,

      707,  707,  707,  707,  707,  707,    0,  707,  707,  707,
      707,  707,  707,  707,  707,  707,  707,  707
    } ;

static yyconst flex_int16_t yy_nxt[1145] =
    {   0,
        8,    9,   10,    9,   11,    8,   12,   13,    8,    8,
       14,   15,   16,   17,   18,   19,   20,   20,   20,   20,
       20,   20,    8,   21,   22,   23,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   25,   24,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   24,   24,   35,
       36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
       24,   24,   24,   46,   47,   59,   62,   59,   48,   65,
       78,   79,   67,   69,   69,   69,   69,   69,   69,   69,
       81,   82,   66,   63,   68,  179,  180,   49,   50,   51,
       52,   51,   50,   50,   50,   50,   50,   50,   50,   50,

       50,   50,   53,   50,   54,   54,   54,   54,   54,   54,
       55,   50,   50,   50,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   50,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   50,   71,  116,   72,   72,   72,   72,   72,   72,
       73,   85,   88,  126,   89,  213,  702,  117,   90,   74,
       75,  699,  214,  127,   76,   91,   86,   87,  120,   92,
       95,   74,   75,   99,   96,  100,   93,  118,  694,   94,
       97,  119,  121,  689,  101,  146,   98,  123,  688,   76,

       71,  102,   77,   77,   77,   77,   77,   77,   77,  103,
      142,  108,  104,  124,  143,  105,  125,   74,   75,  109,
      111,  106,  707,  112,  144,  128,  687,  113,  114,   74,
       75,  110,  129,  130,  147,  115,  135,  131,  684,  136,
      139,  150,  151,  132,  133,  140,  134,  707,  137,  141,
      148,  156,   59,  156,  149,  138,  158,  158,  158,  158,
      158,  158,  158,   59,  189,   59,  160,  161,  163,  164,
      191,  264,  265,  240,  216,  190,  241,  208,  160,  161,
      163,  164,  152,  201,  192,  209,  202,  203,  217,  153,
      204,  235,  205,  154,  226,  150,  151,  683,  155,   71,

      236,   73,   73,   73,   73,   73,   73,   73,  680,  148,
      227,   59,  679,  149,  165,  165,   74,   75,  166,  166,
      166,  166,  166,  166,  166,  150,  151,  523,   74,   75,
      156,  321,  156,  250,  251,  524,  152,  294,  295,  296,
      322,  556,  681,  153,  675,  250,  251,  154,  326,  327,
      328,  676,  155,  158,  158,  158,  158,  158,  158,  158,
      341,  342,  343,  352,  353,  354,  152,  360,  361,  362,
      364,  365,  366,  153,  374,  375,  376,  154,  678,  248,
      248,  589,  155,  249,  249,  249,  249,  249,  249,  249,
      252,  252,  590,  682,  253,  253,  253,  253,  253,  253,

      253,  166,  166,  166,  166,  166,  166,  166,  166,  166,
      166,  166,  166,  166,  166,  249,  249,  249,  249,  249,
      249,  249,  602,  603,  254,  249,  249,  249,  249,  249,
      249,  249,  434,  435,  436,  677,  254,  674,  336,  336,
      673,  161,  337,  337,  337,  337,  337,  337,  337,  437,
      438,  439,  672,  161,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  337,  337,
      337,  337,  337,  337,  337,  551,  552,  164,  337,  337,
      337,  337,  337,  337,  337,  425,  426,  427,  675,  164,
      440,  441,  442,  671,  251,  676,  428,  429,  478,  479,

      480,  500,  501,  502,  469,  670,  251,  525,  681,  481,
      482,  669,  503,  504,  668,  526,  551,  552,  510,  511,
      511,  511,  511,  511,  511,  537,  538,  539,  551,  552,
      612,  613,  612,  613,  612,  613,  540,  541,  551,  552,
      667,  685,  555,  555,  555,  555,  555,  555,  555,  686,
      554,  697,  586,  587,  587,  587,  587,  587,  587,  682,
      692,  666,  551,  552,  615,  690,  695,  693,  551,  552,
      697,  665,  664,  691,  696,  554,  553,  553,  553,  553,
      553,  553,  555,  555,  555,  555,  555,  555,  555,  615,
      612,  613,  690,  663,  692,  695,  662,  612,  613,  661,

      691,  693,  698,  696,  616,  616,  616,  616,  616,  616,
      616,  614,  614,  614,  614,  614,  614,  612,  613,  700,
      703,  698,  705,  660,  659,  658,  657,  701,  704,  656,
      706,  616,  616,  616,  616,  616,  616,  616,  703,  705,
      655,  654,  653,  652,  651,  650,  704,  706,   57,   57,
       57,   57,   57,   57,   57,   57,   83,   83,   83,   83,
       83,  159,  159,  159,  159,  159,   69,   69,  162,  162,
      167,  167,  167,  247,  247,  649,  247,  247,  247,  247,
      247,  553,  553,  553,  648,  647,  646,  553,  588,  588,
      588,  614,  614,  614,  645,  644,  643,  614,  637,  637,

      637,  642,  641,  640,  639,  638,  636,  635,  634,  633,
      632,  631,  630,  629,  628,  627,  626,  625,  624,  623,
      622,  621,  620,  619,  618,  617,  611,  610,  609,  608,
      607,  606,  605,  604,  601,  600,  599,  598,  597,  596,
      595,  594,  593,  592,  591,  585,  584,  583,  582,  581,
      580,  579,  578,  577,  576,  575,  574,  573,  572,  571,
      570,  569,  568,  567,  566,  565,  564,  563,  562,  561,
      560,  559,  558,  557,  556,  550,  549,  548,  547,  546,
      545,  544,  543,  542,  536,  535,  534,  533,  532,  531,
      530,  529,  528,  527,  522,  521,  520,  519,  518,  517,

      516,  515,  514,  513,  512,  509,  508,  507,  506,  505,
      499,  498,  497,  496,  495,  494,  493,  492,  491,  490,
      489,  488,  487,  486,  485,  484,  483,  477,  476,  475,
      474,  473,  472,  471,  470,  469,  468,  467,  466,  465,
      464,  463,  462,  461,  460,  459,  458,  457,  456,  455,
      454,  453,  452,  451,  450,  449,  448,  447,  446,  445,
      444,  443,  433,  432,  431,  430,  424,  423,  422,  421,
      420,  419,  418,  417,  416,  415,  414,  413,  412,  411,
      410,  409,  408,  407,  406,  405,  404,  403,  402,  401,
      400,  399,  398,  397,  396,  395,  394,  393,  392,  391,

      390,  389,  388,  387,  386,  385,  384,  383,  382,  381,
      380,  379,  378,  377,  373,  372,  371,  370,  369,  368,
      367,  363,  359,  358,  357,  356,  355,  351,  350,  349,
      348,  347,  346,  345,  344,  340,  339,  338,  335,  334,
      333,  332,  331,  330,  329,  325,  324,  323,  320,  319,
      318,  317,  316,  315,  314,  313,  312,  311,  310,  309,
      308,  307,  306,  305,  304,  303,  302,  301,  300,  299,
      298,  297,  293,  292,  291,  290,  289,  288,  287,  286,
      285,  284,  283,  282,  281,  280,  279,  278,  277,  276,
      275,  274,  273,  272,  271,  270,  269,  268,  267,  266,

      263,  262,  261,  260,  259,  258,  257,  256,  255,  246,
      245,  244,  243,  242,  239,  238,  237,  234,  233,  232,
      231,  230,  229,  228,  225,  224,  223,  222,  221,  220,
      219,  218,  215,  212,  211,  210,  207,  206,  200,  199,
      198,  197,  196,  195,  194,  193,  188,  187,  186,  185,
      184,  183,  182,  181,  178,  177,  176,  175,  174,  173,
      172,  171,  170,  169,  168,  157,   80,  145,  122,  107,
       84,   80,   70,   64,   61,   60,  707,   58,   58,    7,
      707,  707,  707,  707,  707,  707,  707,  707,  707,  707,
      707,  707,  707,  707,  707,  707,  707,  707,  707,  707,

      707,  707,  707,  707,  707,  707,  707,  707,  707,  707,
      707,  707,  707,  707,  707,  707,  707,  707,  707,  707,
      707,  707,  707,  707,  707,  707,  707,  707,  707,  707,
      707,  707,  707,  707,  707,  707,  707,  707,  707,  707,
      707,  707,  707,  707
    } ;

static yyconst flex_int16_t yy_chk[1145] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    2,    9,   13,    9,    2,   15,
       21,   21,   16,   17,   17,   17,   17,   17,   17,   17,
       23,   23,   15,   13,   16,   94,   94,    2,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,   19,   35,   19,   19,   19,   19,   19,   19,
       19,   26,   27,   40,   27,  121,  700,   35,   27,   19,
       19,  694,  121,   40,   19,   28,   26,   26,   37,   28,
       29,   19,   19,   30,   29,   30,   28,   36,  688,   28,
       29,   36,   37,  685,   30,   46,   29,   39,  684,   19,

       20,   31,   20,   20,   20,   20,   20,   20,   20,   31,
       44,   33,   31,   39,   44,   31,   39,   20,   20,   33,
       34,   31,   72,   34,   44,   41,  683,   34,   34,   20,
       20,   33,   41,   41,   46,   34,   42,   41,  679,   42,
       43,   48,   48,   41,   41,   43,   41,   72,   42,   43,
       47,   51,   47,   51,   47,   42,   54,   54,   54,   54,
       54,   54,   54,   59,  103,   59,   69,   69,   71,   71,
      104,  180,  180,  144,  123,  103,  144,  117,   69,   69,
       71,   71,   48,  114,  104,  117,  114,  114,  123,   48,
      114,  140,  114,   48,  132,  149,  149,  677,   48,   73,

      140,   73,   73,   73,   73,   73,   73,   73,  674,  148,
      132,  148,  673,  148,   74,   74,   73,   73,   74,   74,
       74,   74,   74,   74,   74,  150,  150,  483,   73,   73,
      156,  235,  156,  162,  162,  483,  149,  210,  210,  210,
      235,  556,  676,  149,  670,  162,  162,  149,  239,  239,
      239,  670,  149,  158,  158,  158,  158,  158,  158,  158,
      259,  259,  259,  269,  269,  269,  150,  278,  278,  278,
      282,  282,  282,  150,  290,  290,  290,  150,  672,  160,
      160,  556,  150,  160,  160,  160,  160,  160,  160,  160,
      163,  163,  556,  676,  163,  163,  163,  163,  163,  163,

      163,  165,  165,  165,  165,  165,  165,  165,  166,  166,
      166,  166,  166,  166,  166,  248,  248,  248,  248,  248,
      248,  248,  577,  577,  166,  249,  249,  249,  249,  249,
      249,  249,  378,  378,  378,  671,  166,  665,  250,  250,
      664,  249,  250,  250,  250,  250,  250,  250,  250,  379,
      379,  379,  663,  249,  252,  252,  252,  252,  252,  252,
      252,  253,  253,  253,  253,  253,  253,  253,  336,  336,
      336,  336,  336,  336,  336,  588,  588,  253,  337,  337,
      337,  337,  337,  337,  337,  368,  368,  368,  675,  253,
      380,  380,  380,  657,  337,  675,  368,  368,  424,  424,

      424,  463,  463,  463,  469,  656,  337,  484,  681,  424,
      424,  654,  463,  463,  653,  484,  510,  510,  469,  469,
      469,  469,  469,  469,  469,  497,  497,  497,  511,  511,
      586,  586,  612,  612,  637,  637,  497,  497,  551,  551,
      652,  682,  511,  511,  511,  511,  511,  511,  511,  682,
      510,  693,  551,  551,  551,  551,  551,  551,  551,  681,
      687,  651,  553,  553,  586,  686,  689,  687,  555,  555,
      697,  650,  649,  686,  689,  510,  553,  553,  553,  553,
      553,  553,  555,  555,  555,  555,  555,  555,  555,  586,
      587,  587,  690,  648,  692,  695,  647,  614,  614,  646,

      690,  692,  693,  695,  587,  587,  587,  587,  587,  587,
      587,  614,  614,  614,  614,  614,  614,  616,  616,  698,
      701,  697,  702,  644,  641,  640,  639,  698,  701,  638,
      702,  616,  616,  616,  616,  616,  616,  616,  703,  705,
      636,  635,  634,  632,  631,  630,  703,  705,  708,  708,
      708,  708,  708,  708,  708,  708,  709,  709,  709,  709,
      709,  710,  710,  710,  710,  710,  711,  711,  712,  712,
      713,  713,  713,  714,  714,  629,  714,  714,  714,  714,
      714,  715,  715,  715,  628,  627,  625,  715,  716,  716,
      716,  717,  717,  717,  624,  623,  622,  717,  718,  718,

      718,  621,  620,  619,  618,  617,  609,  608,  607,  606,
      605,  604,  603,  602,  601,  600,  599,  598,  597,  596,
      595,  593,  592,  591,  590,  589,  585,  584,  583,  582,
      581,  580,  579,  578,  576,  572,  567,  566,  565,  564,
      563,  562,  561,  560,  559,  550,  547,  546,  544,  543,
      541,  540,  539,  538,  537,  536,  535,  534,  533,  531,
      530,  529,  528,  527,  526,  525,  524,  523,  522,  521,
      519,  518,  514,  513,  512,  509,  508,  506,  504,  503,
      502,  501,  500,  498,  496,  495,  494,  493,  492,  491,
      489,  488,  487,  486,  482,  481,  480,  479,  478,  477,

      474,  473,  472,  471,  470,  468,  467,  466,  465,  464,
      462,  461,  454,  453,  450,  449,  446,  445,  444,  443,
      432,  431,  429,  428,  427,  426,  425,  422,  420,  419,
      418,  416,  415,  413,  412,  411,  410,  408,  407,  405,
      403,  402,  401,  400,  399,  398,  397,  396,  395,  394,
      392,  391,  390,  389,  388,  387,  386,  385,  384,  383,
      382,  381,  377,  373,  372,  369,  367,  357,  355,  351,
      350,  349,  348,  346,  344,  339,  338,  335,  334,  333,
      332,  331,  330,  325,  324,  323,  322,  321,  320,  319,
      316,  315,  314,  313,  312,  311,  310,  309,  308,  307,

      306,  305,  304,  303,  302,  301,  300,  299,  298,  297,
      296,  295,  294,  291,  289,  288,  287,  286,  285,  284,
      283,  281,  277,  275,  274,  273,  272,  268,  267,  266,
      265,  264,  263,  262,  261,  258,  256,  255,  246,  245,
      244,  243,  242,  241,  240,  238,  237,  236,  234,  233,
      232,  231,  230,  229,  228,  227,  226,  225,  224,  223,
      222,  221,  220,  219,  218,  217,  216,  215,  214,  213,
      212,  211,  209,  208,  207,  206,  205,  204,  203,  202,
      201,  200,  199,  198,  197,  196,  195,  194,  192,  191,
      190,  189,  188,  187,  186,  185,  184,  183,  182,  181,

      179,  178,  177,  176,  175,  174,  173,  172,  170,  155,
      154,  153,  152,  145,  143,  142,  141,  139,  138,  137,
      136,  135,  134,  133,  131,  130,  129,  128,  127,  126,
      125,  124,  122,  120,  119,  118,  116,  115,  113,  112,
      110,  109,  108,  107,  106,  105,  102,  101,  100,   99,
       98,   97,   96,   95,   93,   92,   91,   90,   89,   88,
       87,   86,   85,   82,   78,   53,   49,   45,   38,   32,
       25,   22,   18,   14,   12,   11,    7,    6,    5,  707,
      707,  707,  707,  707,  707,  707,  707,  707,  707,  707,
      707,  707,  707,  707,  707,  707,  707,  707,  707,  707,

      707,  707,  707,  707,  707,  707,  707,  707,  707,  707,
      707,  707,  707,  707,  707,  707,  707,  707,  707,  707,
      707,  707,  707,  707,  707,  707,  707,  707,  707,  707,
      707,  707,  707,  707,  707,  707,  707,  707,  707,  707,
      707,  707,  707,  707
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "glsl_lexer.lpp"
#line 2 "glsl_lexer.lpp"
/*
 * Copyright © 2008, 2009 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include <ctype.h>
#include "ast.h"
#include "glsl_parser_extras.h"
#include "glsl_parser.h"

#define YY_USER_ACTION						\
   do {								\
      yylloc->source = 0;					\
      yylloc->first_column = yycolumn + 1;			\
      yylloc->first_line = yylineno + 1;			\
      yycolumn += yyleng;					\
   } while(0);

#define YY_USER_INIT yylineno = 0; yycolumn = 0;

#define TOKEN_OR_IDENTIFIER(version, token)			 \
   do {								 \
      if (yyextra->language_version >= version) {		 \
	 return token;						 \
      } else {							 \
	 yylval->identifier = strdup(yytext);			 \
	 return IDENTIFIER;					 \
      }								 \
   } while (0)

/* Handle reserved words in GLSL ES (version 100) */
#define TOKEN_OR_IDENTIFIER_ES(version, token)			\
   do {								\
      if (yyextra->es_shader) {					\
	return token;						\
      } else {							\
	TOKEN_OR_IDENTIFIER(version, token);			\
      }								\
   } while (0)

#define RESERVED_WORD(version, token)					\
   do {									\
      if (yyextra->language_version >= version) {			\
	 return token;							\
      } else {								\
	 _mesa_glsl_error(yylloc, yyextra,				\
			  "Illegal use of reserved word `%s'", yytext);	\
	 return ERROR_TOK;						\
      }									\
   } while (0)

#line 990 "glsl_lexer.cpp"

#define INITIAL 0
#define PP 1
#define PRAGMA 2

#define YY_EXTRA_TYPE struct _mesa_glsl_parse_state *

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int _mesa_glsl_lex_init (yyscan_t* scanner);

int _mesa_glsl_lex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int _mesa_glsl_lex_destroy (yyscan_t yyscanner );

int _mesa_glsl_get_debug (yyscan_t yyscanner );

void _mesa_glsl_set_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE _mesa_glsl_get_extra (yyscan_t yyscanner );

void _mesa_glsl_set_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *_mesa_glsl_get_in (yyscan_t yyscanner );

void _mesa_glsl_set_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *_mesa_glsl_get_out (yyscan_t yyscanner );

void _mesa_glsl_set_out  (FILE * out_str ,yyscan_t yyscanner );

int _mesa_glsl_get_leng (yyscan_t yyscanner );

char *_mesa_glsl_get_text (yyscan_t yyscanner );

int _mesa_glsl_get_lineno (yyscan_t yyscanner );

void _mesa_glsl_set_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * _mesa_glsl_get_lval (yyscan_t yyscanner );

void _mesa_glsl_set_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *_mesa_glsl_get_lloc (yyscan_t yyscanner );
    
        void _mesa_glsl_set_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int _mesa_glsl_wrap (yyscan_t yyscanner );
#else
extern int _mesa_glsl_wrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int _mesa_glsl_lex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int _mesa_glsl_lex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 86 "glsl_lexer.lpp"


#line 1227 "glsl_lexer.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			_mesa_glsl_ensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				_mesa_glsl__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		_mesa_glsl__load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 708 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 707 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 88 "glsl_lexer.lpp"
;
	YY_BREAK
/* Preprocessor tokens. */ 
case 2:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 91 "glsl_lexer.lpp"
;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 92 "glsl_lexer.lpp"
{ BEGIN PP; return VERSION; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 93 "glsl_lexer.lpp"
{ BEGIN PP; return EXTENSION; }
	YY_BREAK
case 5:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 94 "glsl_lexer.lpp"
{
				   /* Eat characters until the first digit is
				    * encountered
				    */
				   char *ptr = yytext;
				   while (!isdigit(*ptr))
				      ptr++;

				   /* Subtract one from the line number because
				    * yylineno is zero-based instead of
				    * one-based.
				    */
				   yylineno = strtol(ptr, &ptr, 0) - 1;
				   yylloc->source = strtol(ptr, NULL, 0);
				}
	YY_BREAK
case 6:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 109 "glsl_lexer.lpp"
{
				   /* Eat characters until the first digit is
				    * encountered
				    */
				   char *ptr = yytext;
				   while (!isdigit(*ptr))
				      ptr++;

				   /* Subtract one from the line number because
				    * yylineno is zero-based instead of
				    * one-based.
				    */
				   yylineno = strtol(ptr, &ptr, 0) - 1;
				}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 123 "glsl_lexer.lpp"
{
				  BEGIN PP;
				  return PRAGMA_DEBUG_ON;
				}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 127 "glsl_lexer.lpp"
{
				  BEGIN PP;
				  return PRAGMA_DEBUG_OFF;
				}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 131 "glsl_lexer.lpp"
{
				  BEGIN PP;
				  return PRAGMA_OPTIMIZE_ON;
				}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 135 "glsl_lexer.lpp"
{
				  BEGIN PP;
				  return PRAGMA_OPTIMIZE_OFF;
				}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 139 "glsl_lexer.lpp"
{ BEGIN PRAGMA; }
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 141 "glsl_lexer.lpp"
{ BEGIN 0; yylineno++; yycolumn = 0; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 142 "glsl_lexer.lpp"
{ }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 144 "glsl_lexer.lpp"
{ }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 145 "glsl_lexer.lpp"
{ }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 146 "glsl_lexer.lpp"
return COLON;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 147 "glsl_lexer.lpp"
{
				   yylval->identifier = strdup(yytext);
				   return IDENTIFIER;
				}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 151 "glsl_lexer.lpp"
{
				    yylval->n = strtol(yytext, NULL, 10);
				    return INTCONSTANT;
				}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 155 "glsl_lexer.lpp"
{ BEGIN 0; yylineno++; yycolumn = 0; return EOL; }
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 157 "glsl_lexer.lpp"
{ yylineno++; yycolumn = 0; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 159 "glsl_lexer.lpp"
return ATTRIBUTE;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 160 "glsl_lexer.lpp"
return CONST_TOK;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 161 "glsl_lexer.lpp"
return BOOL_TOK;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 162 "glsl_lexer.lpp"
return FLOAT_TOK;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 163 "glsl_lexer.lpp"
return INT_TOK;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 165 "glsl_lexer.lpp"
return BREAK;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 166 "glsl_lexer.lpp"
return CONTINUE;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 167 "glsl_lexer.lpp"
return DO;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 168 "glsl_lexer.lpp"
return WHILE;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 169 "glsl_lexer.lpp"
return ELSE;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 170 "glsl_lexer.lpp"
return FOR;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 171 "glsl_lexer.lpp"
return IF;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 172 "glsl_lexer.lpp"
return DISCARD;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 173 "glsl_lexer.lpp"
return RETURN;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 175 "glsl_lexer.lpp"
return BVEC2;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 176 "glsl_lexer.lpp"
return BVEC3;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 177 "glsl_lexer.lpp"
return BVEC4;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 178 "glsl_lexer.lpp"
return IVEC2;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 179 "glsl_lexer.lpp"
return IVEC3;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 180 "glsl_lexer.lpp"
return IVEC4;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 181 "glsl_lexer.lpp"
return VEC2;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 182 "glsl_lexer.lpp"
return VEC3;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 183 "glsl_lexer.lpp"
return VEC4;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 184 "glsl_lexer.lpp"
return MAT2X2;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 185 "glsl_lexer.lpp"
return MAT3X3;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 186 "glsl_lexer.lpp"
return MAT4X4;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 187 "glsl_lexer.lpp"
TOKEN_OR_IDENTIFIER(120, MAT2X2);
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 188 "glsl_lexer.lpp"
TOKEN_OR_IDENTIFIER(120, MAT2X3);
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 189 "glsl_lexer.lpp"
TOKEN_OR_IDENTIFIER(120, MAT2X4);
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 190 "glsl_lexer.lpp"
TOKEN_OR_IDENTIFIER(120, MAT3X2);
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 191 "glsl_lexer.lpp"
TOKEN_OR_IDENTIFIER(120, MAT3X3);
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 192 "glsl_lexer.lpp"
TOKEN_OR_IDENTIFIER(120, MAT3X4);
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 193 "glsl_lexer.lpp"
TOKEN_OR_IDENTIFIER(120, MAT4X2);
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 194 "glsl_lexer.lpp"
TOKEN_OR_IDENTIFIER(120, MAT4X3);
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 195 "glsl_lexer.lpp"
TOKEN_OR_IDENTIFIER(120, MAT4X4);
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 197 "glsl_lexer.lpp"
return IN_TOK;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 198 "glsl_lexer.lpp"
return OUT_TOK;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 199 "glsl_lexer.lpp"
return INOUT_TOK;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 200 "glsl_lexer.lpp"
return UNIFORM;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 201 "glsl_lexer.lpp"
return VARYING;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 202 "glsl_lexer.lpp"
TOKEN_OR_IDENTIFIER(120, CENTROID);
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 203 "glsl_lexer.lpp"
TOKEN_OR_IDENTIFIER_ES(120, INVARIANT);
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 205 "glsl_lexer.lpp"
TOKEN_OR_IDENTIFIER_ES(130, FLAT);
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 206 "glsl_lexer.lpp"
TOKEN_OR_IDENTIFIER(130, SMOOTH);
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 207 "glsl_lexer.lpp"
TOKEN_OR_IDENTIFIER(130, NOPERSPECTIVE);
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 209 "glsl_lexer.lpp"
return SAMPLER1D;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 210 "glsl_lexer.lpp"
return SAMPLER2D;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 211 "glsl_lexer.lpp"
return SAMPLER3D;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 212 "glsl_lexer.lpp"
return SAMPLERCUBE;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 213 "glsl_lexer.lpp"
return SAMPLER1DSHADOW;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 214 "glsl_lexer.lpp"
return SAMPLER2DSHADOW;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 216 "glsl_lexer.lpp"
return STRUCT;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 217 "glsl_lexer.lpp"
return VOID_TOK;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 219 "glsl_lexer.lpp"
{
		  if ((yyextra->language_version >= 140)
		      || (yyextra->ARB_fragment_coord_conventions_enable)){
		      return LAYOUT_TOK;
		   } else {
		      yylval->identifier = strdup(yytext);
		      return IDENTIFIER;
		   }
		}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 229 "glsl_lexer.lpp"
return INC_OP;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 230 "glsl_lexer.lpp"
return DEC_OP;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 231 "glsl_lexer.lpp"
return LE_OP;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 232 "glsl_lexer.lpp"
return GE_OP;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 233 "glsl_lexer.lpp"
return EQ_OP;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 234 "glsl_lexer.lpp"
return NE_OP;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 235 "glsl_lexer.lpp"
return AND_OP;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 236 "glsl_lexer.lpp"
return OR_OP;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 237 "glsl_lexer.lpp"
return XOR_OP;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 239 "glsl_lexer.lpp"
return MUL_ASSIGN;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 240 "glsl_lexer.lpp"
return DIV_ASSIGN;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 241 "glsl_lexer.lpp"
return ADD_ASSIGN;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 242 "glsl_lexer.lpp"
return MOD_ASSIGN;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 243 "glsl_lexer.lpp"
return LEFT_ASSIGN;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 244 "glsl_lexer.lpp"
return RIGHT_ASSIGN;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 245 "glsl_lexer.lpp"
return AND_ASSIGN;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 246 "glsl_lexer.lpp"
return XOR_ASSIGN;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 247 "glsl_lexer.lpp"
return OR_ASSIGN;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 248 "glsl_lexer.lpp"
return SUB_ASSIGN;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 250 "glsl_lexer.lpp"
{
			    yylval->n = strtol(yytext, NULL, 10);
			    return INTCONSTANT;
			}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 254 "glsl_lexer.lpp"
{
			    yylval->n = strtol(yytext + 2, NULL, 16);
			    return INTCONSTANT;
			}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 258 "glsl_lexer.lpp"
{
			    yylval->n = strtol(yytext, NULL, 8);
			    return INTCONSTANT;
			}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 263 "glsl_lexer.lpp"
{
			    yylval->real = strtod(yytext, NULL);
			    return FLOATCONSTANT;
			}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 267 "glsl_lexer.lpp"
{
			    yylval->real = strtod(yytext, NULL);
			    return FLOATCONSTANT;
			}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 271 "glsl_lexer.lpp"
{
			    yylval->real = strtod(yytext, NULL);
			    return FLOATCONSTANT;
			}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 275 "glsl_lexer.lpp"
{
			    yylval->real = strtod(yytext, NULL);
			    return FLOATCONSTANT;
			}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 279 "glsl_lexer.lpp"
{
			    yylval->real = strtod(yytext, NULL);
			    return FLOATCONSTANT;
			}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 284 "glsl_lexer.lpp"
{
			    yylval->n = 1;
			    return BOOLCONSTANT;
			}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 288 "glsl_lexer.lpp"
{
			    yylval->n = 0;
			    return BOOLCONSTANT;
			}
	YY_BREAK
/* Reserved words in GLSL 1.10. */
case 104:
YY_RULE_SETUP
#line 295 "glsl_lexer.lpp"
RESERVED_WORD(999, ASM);
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 296 "glsl_lexer.lpp"
RESERVED_WORD(999, CLASS);
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 297 "glsl_lexer.lpp"
RESERVED_WORD(999, UNION);
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 298 "glsl_lexer.lpp"
RESERVED_WORD(999, ENUM);
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 299 "glsl_lexer.lpp"
RESERVED_WORD(999, TYPEDEF);
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 300 "glsl_lexer.lpp"
RESERVED_WORD(999, TEMPLATE);
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 301 "glsl_lexer.lpp"
RESERVED_WORD(999, THIS);
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 302 "glsl_lexer.lpp"
RESERVED_WORD(999, PACKED_TOK);
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 303 "glsl_lexer.lpp"
RESERVED_WORD(999, GOTO);
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 304 "glsl_lexer.lpp"
RESERVED_WORD(130, SWITCH);
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 305 "glsl_lexer.lpp"
RESERVED_WORD(130, DEFAULT);
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 306 "glsl_lexer.lpp"
RESERVED_WORD(999, INLINE_TOK);
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 307 "glsl_lexer.lpp"
RESERVED_WORD(999, NOINLINE);
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 308 "glsl_lexer.lpp"
RESERVED_WORD(999, VOLATILE);
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 309 "glsl_lexer.lpp"
RESERVED_WORD(999, PUBLIC_TOK);
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 310 "glsl_lexer.lpp"
RESERVED_WORD(999, STATIC);
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 311 "glsl_lexer.lpp"
RESERVED_WORD(999, EXTERN);
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 312 "glsl_lexer.lpp"
RESERVED_WORD(999, EXTERNAL);
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 313 "glsl_lexer.lpp"
RESERVED_WORD(999, INTERFACE);
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 314 "glsl_lexer.lpp"
RESERVED_WORD(999, LONG_TOK);
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 315 "glsl_lexer.lpp"
RESERVED_WORD(999, SHORT_TOK);
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 316 "glsl_lexer.lpp"
RESERVED_WORD(999, DOUBLE_TOK);
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 317 "glsl_lexer.lpp"
RESERVED_WORD(999, HALF);
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 318 "glsl_lexer.lpp"
RESERVED_WORD(999, FIXED_TOK);
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 319 "glsl_lexer.lpp"
RESERVED_WORD(999, UNSIGNED);
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 320 "glsl_lexer.lpp"
RESERVED_WORD(999, INPUT_TOK);
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 321 "glsl_lexer.lpp"
RESERVED_WORD(999, OUTPUT);
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 322 "glsl_lexer.lpp"
RESERVED_WORD(999, HVEC2);
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 323 "glsl_lexer.lpp"
RESERVED_WORD(999, HVEC3);
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 324 "glsl_lexer.lpp"
RESERVED_WORD(999, HVEC4);
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 325 "glsl_lexer.lpp"
RESERVED_WORD(999, DVEC2);
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 326 "glsl_lexer.lpp"
RESERVED_WORD(999, DVEC3);
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 327 "glsl_lexer.lpp"
RESERVED_WORD(999, DVEC4);
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 328 "glsl_lexer.lpp"
RESERVED_WORD(999, FVEC2);
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 329 "glsl_lexer.lpp"
RESERVED_WORD(999, FVEC3);
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 330 "glsl_lexer.lpp"
RESERVED_WORD(999, FVEC4);
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 331 "glsl_lexer.lpp"
return SAMPLER2DRECT;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 332 "glsl_lexer.lpp"
RESERVED_WORD(999, SAMPLER3DRECT);
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 333 "glsl_lexer.lpp"
return SAMPLER2DRECTSHADOW;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 334 "glsl_lexer.lpp"
RESERVED_WORD(999, SIZEOF);
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 335 "glsl_lexer.lpp"
RESERVED_WORD(999, CAST);
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 336 "glsl_lexer.lpp"
RESERVED_WORD(999, NAMESPACE);
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 337 "glsl_lexer.lpp"
RESERVED_WORD(999, USING);
	YY_BREAK
/* Additional reserved words in GLSL 1.20. */
case 147:
YY_RULE_SETUP
#line 340 "glsl_lexer.lpp"
TOKEN_OR_IDENTIFIER_ES(120, LOWP);
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 341 "glsl_lexer.lpp"
TOKEN_OR_IDENTIFIER_ES(120, MEDIUMP);
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 342 "glsl_lexer.lpp"
TOKEN_OR_IDENTIFIER_ES(120, HIGHP);
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 343 "glsl_lexer.lpp"
TOKEN_OR_IDENTIFIER_ES(120, PRECISION);
	YY_BREAK
/* Additional reserved words in GLSL 1.30. */
case 151:
YY_RULE_SETUP
#line 346 "glsl_lexer.lpp"
TOKEN_OR_IDENTIFIER(130, COMMON);
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 347 "glsl_lexer.lpp"
TOKEN_OR_IDENTIFIER(130, PARTITION);
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 348 "glsl_lexer.lpp"
TOKEN_OR_IDENTIFIER(130, ACTIVE);
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 349 "glsl_lexer.lpp"
TOKEN_OR_IDENTIFIER_ES(130, SUPERP);
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 350 "glsl_lexer.lpp"
TOKEN_OR_IDENTIFIER(130, SAMPLERBUFFER);
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 351 "glsl_lexer.lpp"
TOKEN_OR_IDENTIFIER(130, FILTER);
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 352 "glsl_lexer.lpp"
TOKEN_OR_IDENTIFIER(130, IMAGE1D);
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 353 "glsl_lexer.lpp"
TOKEN_OR_IDENTIFIER(130, IMAGE2D);
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 354 "glsl_lexer.lpp"
TOKEN_OR_IDENTIFIER(130, IMAGE3D);
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 355 "glsl_lexer.lpp"
TOKEN_OR_IDENTIFIER(130, IMAGECUBE);
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 356 "glsl_lexer.lpp"
TOKEN_OR_IDENTIFIER(130, IIMAGE1D);
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 357 "glsl_lexer.lpp"
TOKEN_OR_IDENTIFIER(130, IIMAGE2D);
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 358 "glsl_lexer.lpp"
TOKEN_OR_IDENTIFIER(130, IIMAGE3D);
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 359 "glsl_lexer.lpp"
TOKEN_OR_IDENTIFIER(130, IIMAGECUBE);
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 360 "glsl_lexer.lpp"
TOKEN_OR_IDENTIFIER(130, UIMAGE1D);
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 361 "glsl_lexer.lpp"
TOKEN_OR_IDENTIFIER(130, UIMAGE2D);
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 362 "glsl_lexer.lpp"
TOKEN_OR_IDENTIFIER(130, UIMAGE3D);
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 363 "glsl_lexer.lpp"
TOKEN_OR_IDENTIFIER(130, UIMAGECUBE);
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 364 "glsl_lexer.lpp"
TOKEN_OR_IDENTIFIER(130, IMAGE1DARRAY);
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 365 "glsl_lexer.lpp"
TOKEN_OR_IDENTIFIER(130, IMAGE2DARRAY);
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 366 "glsl_lexer.lpp"
TOKEN_OR_IDENTIFIER(130, IIMAGE1DARRAY);
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 367 "glsl_lexer.lpp"
TOKEN_OR_IDENTIFIER(130, IIMAGE2DARRAY);
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 368 "glsl_lexer.lpp"
TOKEN_OR_IDENTIFIER(130, UIMAGE1DARRAY);
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 369 "glsl_lexer.lpp"
TOKEN_OR_IDENTIFIER(130, UIMAGE2DARRAY);
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 370 "glsl_lexer.lpp"
TOKEN_OR_IDENTIFIER(130, IMAGE1DSHADOW);
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 371 "glsl_lexer.lpp"
TOKEN_OR_IDENTIFIER(130, IMAGE2DSHADOW);
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 372 "glsl_lexer.lpp"
TOKEN_OR_IDENTIFIER(130, IMAGEBUFFER);
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 373 "glsl_lexer.lpp"
TOKEN_OR_IDENTIFIER(130, IIMAGEBUFFER);
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 374 "glsl_lexer.lpp"
TOKEN_OR_IDENTIFIER(130, UIMAGEBUFFER);
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 375 "glsl_lexer.lpp"
TOKEN_OR_IDENTIFIER(130, ROW_MAJOR);
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 377 "glsl_lexer.lpp"
{
			    struct _mesa_glsl_parse_state *state = yyextra;
			    void *ctx = state;	
			    yylval->identifier = talloc_strdup(ctx, yytext);
			    return IDENTIFIER;
			}
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 384 "glsl_lexer.lpp"
{ return yytext[0]; }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 386 "glsl_lexer.lpp"
ECHO;
	YY_BREAK
#line 2330 "glsl_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(PP):
case YY_STATE_EOF(PRAGMA):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * _mesa_glsl_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( _mesa_glsl_wrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of _mesa_glsl_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					_mesa_glsl_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			_mesa_glsl_restart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) _mesa_glsl_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 708 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 708 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 707);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					_mesa_glsl_restart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( _mesa_glsl_wrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void _mesa_glsl_restart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        _mesa_glsl_ensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            _mesa_glsl__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	_mesa_glsl__init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	_mesa_glsl__load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void _mesa_glsl__switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		_mesa_glsl_pop_buffer_state();
	 *		_mesa_glsl_push_buffer_state(new_buffer);
     */
	_mesa_glsl_ensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	_mesa_glsl__load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (_mesa_glsl_wrap()) processing, but the only time this flag
	 * is looked at is after _mesa_glsl_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void _mesa_glsl__load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE _mesa_glsl__create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) _mesa_glsl_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in _mesa_glsl__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) _mesa_glsl_alloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in _mesa_glsl__create_buffer()" );

	b->yy_is_our_buffer = 1;

	_mesa_glsl__init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with _mesa_glsl__create_buffer()
 * @param yyscanner The scanner object.
 */
    void _mesa_glsl__delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		_mesa_glsl_free((void *) b->yy_ch_buf ,yyscanner );

	_mesa_glsl_free((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a _mesa_glsl_restart() or at EOF.
 */
    static void _mesa_glsl__init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	_mesa_glsl__flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then _mesa_glsl__init_buffer was _probably_
     * called from _mesa_glsl_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void _mesa_glsl__flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		_mesa_glsl__load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void _mesa_glsl_push_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	_mesa_glsl_ensure_buffer_stack(yyscanner);

	/* This block is copied from _mesa_glsl__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from _mesa_glsl__switch_to_buffer. */
	_mesa_glsl__load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void _mesa_glsl_pop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	_mesa_glsl__delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		_mesa_glsl__load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void _mesa_glsl_ensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)_mesa_glsl_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in _mesa_glsl_ensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)_mesa_glsl_realloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in _mesa_glsl_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE _mesa_glsl__scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) _mesa_glsl_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in _mesa_glsl__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	_mesa_glsl__switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to _mesa_glsl_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       _mesa_glsl__scan_bytes() instead.
 */
YY_BUFFER_STATE _mesa_glsl__scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return _mesa_glsl__scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to _mesa_glsl_lex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE _mesa_glsl__scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) _mesa_glsl_alloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in _mesa_glsl__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = _mesa_glsl__scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in _mesa_glsl__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE _mesa_glsl_get_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int _mesa_glsl_get_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int _mesa_glsl_get_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *_mesa_glsl_get_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *_mesa_glsl_get_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int _mesa_glsl_get_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *_mesa_glsl_get_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void _mesa_glsl_set_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void _mesa_glsl_set_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "_mesa_glsl_set_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void _mesa_glsl_set_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "_mesa_glsl_set_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see _mesa_glsl__switch_to_buffer
 */
void _mesa_glsl_set_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void _mesa_glsl_set_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int _mesa_glsl_get_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void _mesa_glsl_set_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * _mesa_glsl_get_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void _mesa_glsl_set_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *_mesa_glsl_get_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void _mesa_glsl_set_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* _mesa_glsl_lex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int _mesa_glsl_lex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) _mesa_glsl_alloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* _mesa_glsl_lex_init_extra has the same functionality as _mesa_glsl_lex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to _mesa_glsl_alloc in
 * the yyextra field.
 */

int _mesa_glsl_lex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    _mesa_glsl_set_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) _mesa_glsl_alloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    _mesa_glsl_set_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from _mesa_glsl_lex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * _mesa_glsl_lex_init()
     */
    return 0;
}

/* _mesa_glsl_lex_destroy is for both reentrant and non-reentrant scanners. */
int _mesa_glsl_lex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		_mesa_glsl__delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		_mesa_glsl_pop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	_mesa_glsl_free(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        _mesa_glsl_free(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * _mesa_glsl_lex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    _mesa_glsl_free ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *_mesa_glsl_alloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *_mesa_glsl_realloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void _mesa_glsl_free (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see _mesa_glsl_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 386 "glsl_lexer.lpp"



void
_mesa_glsl_lexer_ctor(struct _mesa_glsl_parse_state *state, const char *string)
{
   _mesa_glsl_lex_init_extra(state,& state->scanner);
   _mesa_glsl__scan_string(string,state->scanner);
}

void
_mesa_glsl_lexer_dtor(struct _mesa_glsl_parse_state *state)
{
   _mesa_glsl_lex_destroy(state->scanner);
}

